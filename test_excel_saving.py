#!/usr/bin/env python3

import os
import time
from datetime import datetime
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment

class ExcelSavingTester:
    def __init__(self):
        self.excel_file = "test_emotion_data.xlsx"
        self._wb = None
        
    def create_test_excel(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            print(f"üîç Creating test Excel file: {self.excel_file}")
            
            self._wb = Workbook()
            ws = self._wb.active
            ws.title = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå"
            
            headers = [
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (%)", 
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á"
            ]
            
            header_font = Font(bold=True, size=12)
            header_fill = PatternFill(start_color="CCE5FF", end_color="CCE5FF", fill_type="solid")
            
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col)
                cell.value = header
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = Alignment(horizontal='center')
            
            for col in range(1, len(headers) + 1):
                ws.column_dimensions[chr(64 + col)].width = 15
            
            self._wb.save(self.excel_file)
            print(f"‚úÖ Test Excel file created: {self.excel_file}")
            print(f"üìÅ File path: {os.path.abspath(self.excel_file)}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error creating Excel file: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def add_test_data(self, emotion, confidence, satisfaction_level, satisfaction_text, camera_method):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏á Excel"""
        try:
            if not os.path.exists(self.excel_file):
                print("‚ùå Excel file not found, creating new one...")
                if not self.create_test_excel():
                    return False
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
            if self._wb is None:
                self._wb = openpyxl.load_workbook(self.excel_file)
            
            ws = self._wb.active
            
            # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_row = ws.max_row + 1
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            now = datetime.now()
            data = [
                now.strftime("%Y-%m-%d"),
                now.strftime("%H:%M:%S"),
                emotion,
                f"{confidence:.2f}",
                satisfaction_level,
                satisfaction_text,
                camera_method
            ]
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for col, value in enumerate(data, 1):
                cell = ws.cell(row=next_row, column=col)
                cell.value = value
                cell.alignment = Alignment(horizontal='center')
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            self._wb.save(self.excel_file)
            
            print(f"‚úÖ Data added to Excel row {next_row}: {emotion} ({confidence:.1f}%)")
            return True
            
        except Exception as e:
            print(f"‚ùå Error adding data to Excel: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def test_excel_operations(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Excel"""
        print("üß™ Testing Excel Operations")
        print("=" * 40)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        if not self.create_test_excel():
            return False
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        test_data = [
            ("Happy", 85.5, 5, "*****", "test_camera"),
            ("Neutral", 60.0, 3, "***", "test_camera"),
            ("Sad", 35.2, 2, "**", "test_camera"),
            ("Angry", 15.8, 1, "*", "test_camera")
        ]
        
        print("\nüìù Adding test data...")
        for emotion, confidence, level, text, camera in test_data:
            success = self.add_test_data(emotion, confidence, level, text, camera)
            if not success:
                print(f"‚ùå Failed to add data: {emotion}")
                return False
            time.sleep(0.5)  # ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if os.path.exists(self.excel_file):
            file_size = os.path.getsize(self.excel_file)
            print(f"\n‚úÖ Excel file created successfully!")
            print(f"üìÅ File: {os.path.abspath(self.excel_file)}")
            print(f"üìä File size: {file_size} bytes")
            print(f"üìù Data rows: {len(test_data) + 1} (including header)")
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            try:
                wb = openpyxl.load_workbook(self.excel_file)
                ws = wb.active
                print(f"üìã Sheet name: {ws.title}")
                print(f"üìä Total rows: {ws.max_row}")
                print(f"üìä Total columns: {ws.max_column}")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                print("\nüìã Sample data:")
                for row in range(1, min(4, ws.max_row + 1)):
                    row_data = []
                    for col in range(1, ws.max_column + 1):
                        cell_value = ws.cell(row=row, column=col).value
                        row_data.append(str(cell_value))
                    print(f"   Row {row}: {' | '.join(row_data)}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå Error reading Excel file: {e}")
                return False
        else:
            print("‚ùå Excel file not found after creation")
            return False
    
    def cleanup(self):
        """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            if os.path.exists(self.excel_file):
                os.remove(self.excel_file)
                print(f"üóëÔ∏è Test file removed: {self.excel_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error removing test file: {e}")

def main():
    print("üß™ Excel Saving Test Tool")
    print("üéØ Test Excel file creation and data saving")
    print("=" * 50)
    
    tester = ExcelSavingTester()
    
    try:
        success = tester.test_excel_operations()
        
        if success:
            print("\n‚úÖ Excel operations test completed successfully!")
            print("üí° The Excel saving functionality is working correctly.")
        else:
            print("\n‚ùå Excel operations test failed!")
            print("üí° Check the error messages above for details.")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try:
            keep_file = input("\nüóëÔ∏è Keep test file? (y/n): ").strip().lower()
            if keep_file != 'y':
                tester.cleanup()
        except:
            tester.cleanup()
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrupted")
        tester.cleanup()
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        tester.cleanup()

if __name__ == "__main__":
    main()
